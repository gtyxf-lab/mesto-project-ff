/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 498:
/***/ (() => {

eval("\n;// ./src/scripts/api.js\nvar config = {\n  baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-42',\n  headers: {\n    authorization: '708ae2fd-bcd6-4055-a570-0eecbeaad6d1',\n    'Content-Type': 'application/json'\n  }\n};\nfunction getUserInfo() {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction getInitialCards() {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction patchProfileEdit(newName, newDesc) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: newName,\n      about: newDesc\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\nfunction postCreateCard(cardTitle, cardLink) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: cardTitle,\n      link: cardLink\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\nfunction removeCardFromServer(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/\").concat(cardId), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction likeCard(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: 'PUT',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction unlikeCard(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction changeAvatar(newAvatarLink) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: newAvatarLink\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\n;// ./src/scripts/modal.js\nfunction openModal(modalClass) {\n  var modal = document.querySelector(modalClass);\n  modal.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeModalEsc);\n  modal.addEventListener('click', closeModalOverlay);\n}\nfunction closeModalByEvent(evt) {\n  var modal = evt.target.closest('.popup');\n  if (modal) {\n    modal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEsc);\n    modal.removeEventListener('click', closeModalOverlay);\n  }\n}\nfunction closeModal() {\n  var openedModal = document.querySelector('.popup_is-opened');\n  if (openedModal) {\n    openedModal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEsc);\n    openedModal.removeEventListener('click', closeModalOverlay);\n  }\n}\nfunction closeModalEsc(evt) {\n  if (evt.key === 'Escape') {\n    closeModal();\n  }\n}\nfunction closeModalOverlay(evt) {\n  if (evt.target === evt.currentTarget) {\n    closeModalByEvent(evt);\n  }\n}\n;// ./src/scripts/card.js\n\n\nvar cardToDeleteId = null;\nvar cardToDeleteElement = null;\nfunction confirmDelete() {\n  if (cardToDeleteId && cardToDeleteElement) {\n    removeCardFromServer(cardToDeleteId).then(function () {\n      cardToDeleteElement.remove();\n      closeModal();\n      cardToDeleteId = null;\n      cardToDeleteElement = null;\n    }).catch(function (err) {\n      console.error('Ошибка при удалении карточки:', err);\n      closeModal();\n    });\n  }\n}\nfunction cancelDelete() {\n  cardToDeleteId = null;\n  cardToDeleteElement = null;\n  closeModal();\n}\nfunction deleteCard(evt, cardId) {\n  var cardElement = evt.target.closest('.card');\n  cardToDeleteId = cardId;\n  cardToDeleteElement = cardElement;\n  openModal('.popup_type_confirm');\n}\nfunction createCard(cardData, deleteCard, cardTemplate, handleImageClick, userId, likeCallback, unlikeCallback) {\n  var card = cardTemplate.querySelector('.card').cloneNode(true);\n  var cardImage = card.querySelector('.card__image');\n  var cardTitle = card.querySelector('.card__title');\n  var cardLikeButton = card.querySelector('.card__like-button');\n  var cardLikeCount = card.querySelector('.card__like-count');\n  var deleteButton = card.querySelector('.card__delete-button');\n  var isLiked = cardData.likes.some(function (like) {\n    return like._id === userId;\n  });\n  cardImage.src = cardData.link;\n  cardImage.alt = cardData.name;\n  cardTitle.textContent = cardData.name;\n  cardLikeCount.textContent = cardData.likes.length;\n  cardImage.addEventListener('error', function () {\n    var errorContainer = document.createElement('div');\n    errorContainer.className = 'card__image-error';\n    errorContainer.innerHTML = \"\\n      <div class=\\\"card__image-error-background\\\"></div>\\n      <p class=\\\"card__image-error-text\\\">\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 :(</p>\\n    \";\n    cardImage.style.display = 'none';\n    card.insertBefore(errorContainer, cardImage.nextSibling);\n  });\n  if (isLiked) {\n    cardLikeButton.classList.add('card__like-button_is-active');\n  }\n  if (cardData.owner._id !== userId) {\n    deleteButton.style.display = 'none';\n  } else {\n    deleteButton.addEventListener('click', function (evt) {\n      deleteCard(evt, cardData._id);\n    });\n  }\n  cardLikeButton.addEventListener('click', function (evt) {\n    var isCurrentlyLiked = evt.target.classList.contains('card__like-button_is-active');\n    if (isCurrentlyLiked) {\n      unlikeCallback(cardData._id).then(function (updatedCard) {\n        evt.target.classList.remove('card__like-button_is-active');\n        cardLikeCount.textContent = updatedCard.likes.length;\n      }).catch(function (err) {\n        console.error('Ошибка при снятии лайка:', err);\n      });\n    } else {\n      likeCallback(cardData._id).then(function (updatedCard) {\n        evt.target.classList.add('card__like-button_is-active');\n        cardLikeCount.textContent = updatedCard.likes.length;\n      }).catch(function (err) {\n        console.error('Ошибка при установке лайка:', err);\n      });\n    }\n  });\n  cardImage.addEventListener('click', function () {\n    return handleImageClick(cardData);\n  });\n  return card;\n}\n;// ./src/scripts/validation.js\nfunction showInputError(formElement, inputElement, errorMsg, config) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.add(config.inputErrorClass);\n  errorElement.textContent = errorMsg;\n  errorElement.classList.add(config.errorClass);\n}\nfunction hideInputError(formElement, inputElement, config) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.classList.remove(config.errorClass);\n  errorElement.textContent = '';\n}\nfunction checkInputValidity(inputElement) {\n  if (inputElement.validity.patternMismatch) {\n    return inputElement.dataset.errorMessage;\n  }\n  return inputElement.validationMessage;\n}\nfunction isValid(formElement, inputElement, config) {\n  var errorMsg = checkInputValidity(inputElement);\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, errorMsg, config);\n  } else {\n    hideInputError(formElement, inputElement, config);\n  }\n}\nfunction hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n}\nfunction toggleButtonState(inputList, buttonElement, config) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(config.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(config.inactiveButtonClass);\n  }\n}\n;\nfunction setEventListener(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      isValid(formElement, inputElement, config);\n      toggleButtonState(inputList, buttonElement, config);\n    });\n  });\n}\nfunction enableValidation(config) {\n  var formList = Array.from(document.querySelectorAll(config.formSelector));\n  formList.forEach(function (formElement) {\n    setEventListener(formElement, config);\n  });\n}\nfunction clearValidation(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    hideInputError(formElement, inputElement, config);\n  });\n  toggleButtonState(inputList, buttonElement, config);\n}\n;// ./src/scripts/index.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\nvar cardTemplate = document.querySelector('#card-template').content;\nvar cardsContainer = document.querySelector('.places__list');\nvar profileEditButton = document.querySelector('.profile__edit-button');\nvar closeButtons = document.querySelectorAll('.popup__close');\nvar addCardButton = document.querySelector('.profile__add-button');\nvar profileFormElement = document.forms['edit-profile'];\nvar nameInput = profileFormElement.elements.name;\nvar jobInput = profileFormElement.elements.description;\nvar cardForm = document.forms['new-place'];\nvar placeName = cardForm.elements['place-name'];\nvar placeImg = cardForm.elements.link;\nvar profileName = document.querySelector('.profile__title');\nvar profileDesc = document.querySelector('.profile__description');\nvar profileAvatar = document.querySelector('.profile__image');\nvar avatarEditFormElement = document.forms['update_avatar'];\nvar confirmPopup = document.querySelector('.popup_type_confirm');\nvar confirmButton = confirmPopup.querySelector('.popup__button');\nvar confirmCloseButton = confirmPopup.querySelector('.popup__close');\nvar currentUserId;\nvar validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\nPromise.all([getUserInfo(), getInitialCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    userInfo = _ref2[0],\n    cardList = _ref2[1];\n  currentUserId = userInfo._id;\n  profileName.textContent = userInfo.name;\n  profileDesc.textContent = userInfo.about;\n  profileAvatar.style.backgroundImage = \"url('\".concat(userInfo.avatar, \"')\");\n  cardList.forEach(function (card) {\n    var newCard = createCard(card, deleteCard, cardTemplate, handleImageClick, currentUserId, likeCard, unlikeCard);\n    cardsContainer.append(newCard);\n  });\n}).catch(function (err) {\n  console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445: \".concat(err));\n});\nfunction scripts_toggleButtonState(button, isLoading, originalText) {\n  if (isLoading) {\n    button.textContent = 'Сохранение...';\n    button.disabled = true;\n    button.classList.add('popup__button_loading');\n  } else {\n    button.textContent = originalText;\n    button.disabled = false;\n    button.classList.remove('popup__button_loading');\n  }\n}\nconfirmButton.addEventListener('click', confirmDelete);\nconfirmCloseButton.addEventListener('click', cancelDelete);\nconfirmPopup.addEventListener('click', function (evt) {\n  if (evt.target === confirmPopup) {\n    cancelDelete();\n  }\n});\nfunction handleImageClick(cardData) {\n  var popupImage = document.querySelector('.popup__image');\n  var popupCaption = document.querySelector('.popup__caption');\n  popupImage.src = cardData.link;\n  popupImage.alt = cardData.name;\n  popupCaption.textContent = cardData.name;\n  openModal('.popup_type_image');\n}\nprofileEditButton.addEventListener('click', function () {\n  nameInput.value = profileName.textContent;\n  jobInput.value = profileDesc.textContent;\n  openModal('.popup_type_edit');\n  clearValidation(profileFormElement, validationConfig);\n});\naddCardButton.addEventListener('click', function () {\n  openModal('.popup_type_new-card');\n  clearValidation(cardForm, validationConfig);\n});\nprofileAvatar.addEventListener('click', function () {\n  openModal('.popup_type_avatar');\n  clearValidation(avatarEditFormElement, validationConfig);\n});\nfunction handleAvatarUpdateFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var profileNewAvatarLink = document.querySelector('.profile__new_avatar-link').value;\n  changeAvatar(profileNewAvatarLink).then(function () {\n    profileAvatar.style.backgroundImage = \"url('\".concat(profileNewAvatarLink, \"')\");\n    closeModal(evt);\n    avatarEditFormElement.reset();\n  }).catch(function (err) {\n    console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\\u0430: \".concat(err));\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\navatarEditFormElement.addEventListener('submit', handleAvatarUpdateFormSubmit);\ncloseButtons.forEach(function (button) {\n  button.addEventListener('click', closeModalByEvent);\n});\nfunction handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var profileName = document.querySelector('.profile__title');\n  var profileJob = document.querySelector('.profile__description');\n  patchProfileEdit(nameInput.value, jobInput.value).then(function () {\n    profileName.textContent = nameInput.value;\n    profileJob.textContent = jobInput.value;\n    closeModal(evt);\n  }).catch(function (err) {\n    console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044F: \".concat(err));\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\nprofileFormElement.addEventListener('submit', handleProfileFormSubmit);\nfunction newCardFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var createData = {\n    name: placeName.value,\n    link: placeImg.value\n  };\n  postCreateCard(createData.name, createData.link).then(function (newCardFromServer) {\n    var newCard = createCard(newCardFromServer, deleteCard, cardTemplate, handleImageClick, currentUserId, likeCard, unlikeCard);\n    cardsContainer.prepend(newCard);\n    cardForm.reset();\n    closeModal(evt);\n    clearValidation(cardForm, validationConfig);\n  }).catch(function (err) {\n    console.error('Ошибка при создании карточки:', err);\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\ncardForm.addEventListener('submit', newCardFormSubmit);\nenableValidation(validationConfig);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///498\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[498]();
/******/ 	
/******/ })()
;