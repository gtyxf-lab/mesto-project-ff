/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 498:
/***/ (() => {

eval("\n;// ./src/scripts/api.js\nvar config = {\n  baseUrl: 'https://mesto.nomoreparties.co/v1/wff-cohort-42',\n  headers: {\n    authorization: '708ae2fd-bcd6-4055-a570-0eecbeaad6d1',\n    'Content-Type': 'application/json'\n  }\n};\nfunction getUserInfo() {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction getInitialCards() {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction patchProfileEdit(newName, newDesc) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: newName,\n      about: newDesc\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\nfunction postCreateCard(cardTitle, cardLink) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards\"), {\n    method: 'POST',\n    headers: config.headers,\n    body: JSON.stringify({\n      name: cardTitle,\n      link: cardLink\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\nfunction api_removeCardFromServer(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/\").concat(cardId), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction likeCard(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: 'PUT',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction unlikeCard(cardId) {\n  return fetch(\"\".concat(config.baseUrl, \"/cards/likes/\").concat(cardId), {\n    method: 'DELETE',\n    headers: config.headers\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  });\n}\nfunction changeAvatar(newAvatarLink) {\n  return fetch(\"\".concat(config.baseUrl, \"/users/me/avatar\"), {\n    method: 'PATCH',\n    headers: config.headers,\n    body: JSON.stringify({\n      avatar: newAvatarLink\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430: \".concat(res.status));\n  }).catch(function (err) {\n    console.error(err);\n  });\n}\n;// ./src/scripts/modal.js\nfunction openModal(modalClass) {\n  var modal = document.querySelector(modalClass);\n  modal.classList.add('popup_is-opened');\n  document.addEventListener('keydown', closeModalEsc);\n  modal.addEventListener('click', closeModalOverlay);\n}\nfunction closeModalByEvent(evt) {\n  var modal = evt.target.closest('.popup');\n  if (modal) {\n    modal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEsc);\n    modal.removeEventListener('click', closeModalOverlay);\n  }\n}\nfunction closeModal() {\n  var openedModal = document.querySelector('.popup_is-opened');\n  if (openedModal) {\n    openedModal.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeModalEsc);\n    openedModal.removeEventListener('click', closeModalOverlay);\n  }\n}\nfunction closeModalEsc(evt) {\n  if (evt.key === 'Escape') {\n    closeModal();\n  }\n}\nfunction closeModalOverlay(evt) {\n  if (evt.target === evt.currentTarget) {\n    closeModalByEvent(evt);\n  }\n}\n;// ./src/scripts/card.js\n\n\nvar cardToDeleteId = null;\nvar cardToDeleteElement = null;\nfunction confirmDelete() {\n  if (cardToDeleteId && cardToDeleteElement) {\n    api_removeCardFromServer(cardToDeleteId).then(function () {\n      cardToDeleteElement.remove();\n      closeModal();\n      cardToDeleteId = null;\n      cardToDeleteElement = null;\n    }).catch(function (err) {\n      console.error('Ошибка при удалении карточки:', err);\n      closeModal();\n    });\n  }\n}\nfunction cancelDelete() {\n  cardToDeleteId = null;\n  cardToDeleteElement = null;\n  closeModal();\n}\nfunction deleteCard(evt, cardId) {\n  var cardElement = evt.target.closest('.card');\n  cardToDeleteId = cardId;\n  cardToDeleteElement = cardElement;\n  openModal('.popup_type_confirm');\n}\nfunction deleteCardImmediately(evt, cardId) {\n  var cardElement = evt.target.closest('.card');\n  removeCardFromServer(cardId).then(function () {\n    cardElement.remove();\n  }).catch(function (err) {\n    console.error('Ошибка при удалении карточки:', err);\n  });\n}\nfunction createCard(cardData, deleteCard, cardTemplate, handleImageClick, userId, likeCallback, unlikeCallback) {\n  var card = cardTemplate.querySelector('.card').cloneNode(true);\n  var cardImage = card.querySelector('.card__image');\n  var cardTitle = card.querySelector('.card__title');\n  var cardLikeButton = card.querySelector('.card__like-button');\n  var cardLikeCount = card.querySelector('.card__like-count');\n  var deleteButton = card.querySelector('.card__delete-button');\n  var isLiked = cardData.likes.some(function (like) {\n    return like._id === userId;\n  });\n  cardImage.src = cardData.link;\n  cardImage.alt = cardData.name;\n  cardTitle.textContent = cardData.name;\n  cardLikeCount.textContent = cardData.likes.length;\n  cardImage.addEventListener('error', function () {\n    var errorContainer = document.createElement('div');\n    errorContainer.className = 'card__image-error';\n    errorContainer.innerHTML = \"\\n      <div class=\\\"card__image-error-background\\\"></div>\\n      <p class=\\\"card__image-error-text\\\">\\u041D\\u0435 \\u0443\\u0434\\u0430\\u043B\\u043E\\u0441\\u044C \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u0438\\u0442\\u044C \\u0438\\u0437\\u043E\\u0431\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435 :(</p>\\n    \";\n    cardImage.style.display = 'none';\n    card.insertBefore(errorContainer, cardImage.nextSibling);\n  });\n  if (isLiked) {\n    cardLikeButton.classList.add('card__like-button_is-active');\n  }\n  if (cardData.owner._id !== userId) {\n    deleteButton.style.display = 'none';\n  } else {\n    deleteButton.addEventListener('click', function (evt) {\n      deleteCard(evt, cardData._id);\n    });\n  }\n  cardLikeButton.addEventListener('click', function (evt) {\n    var isCurrentlyLiked = evt.target.classList.contains('card__like-button_is-active');\n    if (isCurrentlyLiked) {\n      unlikeCallback(cardData._id).then(function (updatedCard) {\n        evt.target.classList.remove('card__like-button_is-active');\n        cardLikeCount.textContent = updatedCard.likes.length;\n      }).catch(function (err) {\n        console.error('Ошибка при снятии лайка:', err);\n      });\n    } else {\n      likeCallback(cardData._id).then(function (updatedCard) {\n        evt.target.classList.add('card__like-button_is-active');\n        cardLikeCount.textContent = updatedCard.likes.length;\n      }).catch(function (err) {\n        console.error('Ошибка при установке лайка:', err);\n      });\n    }\n  });\n  cardImage.addEventListener('click', function () {\n    return handleImageClick(cardData);\n  });\n  return card;\n}\n;// ./src/scripts/validation.js\nfunction showInputError(formElement, inputElement, errorMsg, config) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.add(config.inputErrorClass);\n  errorElement.textContent = errorMsg;\n  errorElement.classList.add(config.errorClass);\n}\nfunction hideInputError(formElement, inputElement, config) {\n  var errorElement = formElement.querySelector(\".\".concat(inputElement.id, \"-error\"));\n  inputElement.classList.remove(config.inputErrorClass);\n  errorElement.classList.remove(config.errorClass);\n  errorElement.textContent = '';\n}\nfunction checkInputValidity(inputElement) {\n  if (inputElement.validity.patternMismatch) {\n    return inputElement.dataset.errorMessage;\n  }\n  return inputElement.validationMessage;\n}\nfunction isValid(formElement, inputElement, config) {\n  var errorMsg = checkInputValidity(inputElement);\n  if (!inputElement.validity.valid) {\n    showInputError(formElement, inputElement, errorMsg, config);\n  } else {\n    hideInputError(formElement, inputElement, config);\n  }\n}\nfunction hasInvalidInput(inputList) {\n  return inputList.some(function (inputElement) {\n    return !inputElement.validity.valid;\n  });\n}\nfunction toggleButtonState(inputList, buttonElement, config) {\n  if (hasInvalidInput(inputList)) {\n    buttonElement.disabled = true;\n    buttonElement.classList.add(config.inactiveButtonClass);\n  } else {\n    buttonElement.disabled = false;\n    buttonElement.classList.remove(config.inactiveButtonClass);\n  }\n}\n;\nfunction setEventListener(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    inputElement.addEventListener('input', function () {\n      isValid(formElement, inputElement, config);\n      toggleButtonState(inputList, buttonElement, config);\n    });\n  });\n}\nfunction enableValidation(config) {\n  var formList = Array.from(document.querySelectorAll(config.formSelector));\n  formList.forEach(function (formElement) {\n    setEventListener(formElement, config);\n  });\n}\nfunction clearValidation(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    hideInputError(formElement, inputElement, config);\n  });\n  toggleButtonState(inputList, buttonElement, config);\n}\nfunction forceValidation(formElement, config) {\n  var inputList = Array.from(formElement.querySelectorAll(config.inputSelector));\n  var buttonElement = formElement.querySelector(config.submitButtonSelector);\n  inputList.forEach(function (inputElement) {\n    isValid(formElement, inputElement, config);\n  });\n  toggleButtonState(inputList, buttonElement, config);\n}\n;// ./src/scripts/index.js\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\n\n\n\n\n\nvar cardTemplate = document.querySelector('#card-template').content;\nvar cardsContainer = document.querySelector('.places__list');\nvar profileEditButton = document.querySelector('.profile__edit-button');\nvar closeButtons = document.querySelectorAll('.popup__close');\nvar addCardButton = document.querySelector('.profile__add-button');\nvar profileFormElement = document.forms['edit-profile'];\nvar nameInput = profileFormElement.elements.name;\nvar jobInput = profileFormElement.elements.description;\nvar cardForm = document.forms['new-place'];\nvar placeName = cardForm.elements['place-name'];\nvar placeImg = cardForm.elements.link;\nvar profileName = document.querySelector('.profile__title');\nvar profileDesc = document.querySelector('.profile__description');\nvar profileAvatar = document.querySelector('.profile__image');\nvar avatarEditFormElement = document.forms['update_avatar'];\nvar confirmPopup = document.querySelector('.popup_type_confirm');\nvar confirmButton = confirmPopup.querySelector('.popup__button');\nvar confirmCloseButton = confirmPopup.querySelector('.popup__close');\nvar currentUserId;\nvar validationConfig = {\n  formSelector: '.popup__form',\n  inputSelector: '.popup__input',\n  submitButtonSelector: '.popup__button',\n  inactiveButtonClass: 'popup__button_disabled',\n  inputErrorClass: 'popup__input_type_error',\n  errorClass: 'popup__error_visible'\n};\nPromise.all([getUserInfo(), getInitialCards()]).then(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n    userInfo = _ref2[0],\n    cardList = _ref2[1];\n  currentUserId = userInfo._id;\n  profileName.textContent = userInfo.name;\n  profileDesc.textContent = userInfo.about;\n  profileAvatar.style.backgroundImage = \"url('\".concat(userInfo.avatar, \"')\");\n  cardList.forEach(function (card) {\n    var newCard = createCard(card, deleteCard, cardTemplate, handleImageClick, currentUserId, likeCard, unlikeCard);\n    cardsContainer.append(newCard);\n  });\n}).catch(function (err) {\n  console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u0437\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0438 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445: \".concat(err));\n});\nfunction scripts_toggleButtonState(button, isLoading, originalText) {\n  if (isLoading) {\n    button.textContent = 'Сохранение...';\n    button.disabled = true;\n    button.classList.add('popup__button_loading');\n  } else {\n    button.textContent = originalText;\n    button.disabled = false;\n    button.classList.remove('popup__button_loading');\n  }\n}\nconfirmButton.addEventListener('click', confirmDelete);\nconfirmCloseButton.addEventListener('click', cancelDelete);\nconfirmPopup.addEventListener('click', function (evt) {\n  if (evt.target === confirmPopup) {\n    cancelDelete();\n  }\n});\nfunction handleImageClick(cardData) {\n  var popupImage = document.querySelector('.popup__image');\n  var popupCaption = document.querySelector('.popup__caption');\n  popupImage.src = cardData.link;\n  popupImage.alt = cardData.name;\n  popupCaption.textContent = cardData.name;\n  openModal('.popup_type_image');\n}\nprofileEditButton.addEventListener('click', function () {\n  nameInput.value = profileName.textContent;\n  jobInput.value = profileDesc.textContent;\n  openModal('.popup_type_edit');\n  clearValidation(profileFormElement, validationConfig);\n  forceValidation(profileFormElement, validationConfig); // добавил эту функцию т.к. с сервера идут данные содержащие запятую и при открытии модалки - кнопка \"сохранить\" недоступна пока не уберешь запятую, а сообщение о том почему кнопка недоступна не выводится из-за clerValidation\n});\naddCardButton.addEventListener('click', function () {\n  openModal('.popup_type_new-card');\n  clearValidation(cardForm, validationConfig);\n});\nprofileAvatar.addEventListener('click', function () {\n  openModal('.popup_type_avatar');\n  clearValidation(avatarEditFormElement, validationConfig);\n});\nfunction handleAvatarUpdateFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var profileNewAvatarLink = document.querySelector('.profile__new_avatar-link').value;\n  changeAvatar(profileNewAvatarLink).then(function () {\n    profileAvatar.style.backgroundImage = \"url('\".concat(profileNewAvatarLink, \"')\");\n    closeModal(evt);\n    avatarEditFormElement.reset();\n  }).catch(function (err) {\n    console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u0430\\u0432\\u0430\\u0442\\u0430\\u0440\\u0430: \".concat(err));\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\navatarEditFormElement.addEventListener('submit', handleAvatarUpdateFormSubmit);\ncloseButtons.forEach(function (button) {\n  button.addEventListener('click', closeModalByEvent);\n});\nfunction handleProfileFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var profileName = document.querySelector('.profile__title');\n  var profileJob = document.querySelector('.profile__description');\n  patchProfileEdit(nameInput.value, jobInput.value).then(function () {\n    profileName.textContent = nameInput.value;\n    profileJob.textContent = jobInput.value;\n    closeModal(evt);\n  }).catch(function (err) {\n    console.error(\"\\u041E\\u0448\\u0438\\u0431\\u043A\\u0430 \\u043F\\u0440\\u0438 \\u043E\\u0431\\u043D\\u043E\\u0432\\u043B\\u0435\\u043D\\u0438\\u0438 \\u043F\\u0440\\u043E\\u0444\\u0438\\u043B\\u044F: \".concat(err));\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\nprofileFormElement.addEventListener('submit', handleProfileFormSubmit);\nfunction newCardFormSubmit(evt) {\n  evt.preventDefault();\n  var submitButton = evt.target.querySelector(validationConfig.submitButtonSelector);\n  var originalText = submitButton.textContent;\n  scripts_toggleButtonState(submitButton, true, originalText);\n  var createData = {\n    name: placeName.value,\n    link: placeImg.value\n  };\n  postCreateCard(createData.name, createData.link).then(function (newCardFromServer) {\n    var newCard = createCard(newCardFromServer, deleteCard, cardTemplate, handleImageClick, currentUserId, likeCard, unlikeCard);\n    cardsContainer.prepend(newCard);\n    cardForm.reset();\n    closeModal(evt);\n    clearValidation(cardForm, validationConfig);\n  }).catch(function (err) {\n    console.error('Ошибка при создании карточки:', err);\n  }).finally(function () {\n    scripts_toggleButtonState(submitButton, false, originalText);\n  });\n}\ncardForm.addEventListener('submit', newCardFormSubmit);\nenableValidation(validationConfig);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBTyxDQUFDQyxLQUFLLENBQUMsK0JBQStCLEVBQUVGLEdBQUcsQ0FBQztFQUNyRCxDQUFDLENBQUMsQ0FDRHlKLE9BQU8sQ0FBQyxZQUFNO0lBQ2IzRCx5QkFBaUIsQ0FBQ3dELFlBQVksRUFBRSxLQUFLLEVBQUVOLFlBQVksQ0FBQztFQUN0RCxDQUFDLENBQUM7QUFDTjtBQUVBdkIsUUFBUSxDQUFDcEcsZ0JBQWdCLENBQUMsUUFBUSxFQUFFdUksaUJBQWlCLENBQUM7QUFFdERuRCxnQkFBZ0IsQ0FBQzJCLGdCQUFnQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcHJvamVjdC1tZXN0by8uL3NyYy9zY3JpcHRzL2FwaS5qcz9hMzk3Iiwid2VicGFjazovL3Byb2plY3QtbWVzdG8vLi9zcmMvc2NyaXB0cy9tb2RhbC5qcz9hMGVhIiwid2VicGFjazovL3Byb2plY3QtbWVzdG8vLi9zcmMvc2NyaXB0cy9jYXJkLmpzPzY4ZjAiLCJ3ZWJwYWNrOi8vcHJvamVjdC1tZXN0by8uL3NyYy9zY3JpcHRzL3ZhbGlkYXRpb24uanM/MTZkYyIsIndlYnBhY2s6Ly9wcm9qZWN0LW1lc3RvLy4vc3JjL3NjcmlwdHMvaW5kZXguanM/MTU5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XG4gIGJhc2VVcmw6ICdodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvd2ZmLWNvaG9ydC00MicsXG4gIGhlYWRlcnM6IHtcbiAgICBhdXRob3JpemF0aW9uOiAnNzA4YWUyZmQtYmNkNi00MDU1LWE1NzAtMGVlY2JlYWFkNmQxJyxcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJJbmZvKCkge1xuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVcmx9L3VzZXJzL21lYCwge1xuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXG4gIH0pXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluaXRpYWxDYXJkcygpIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xuICB9KVxuICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRjaFByb2ZpbGVFZGl0KG5ld05hbWUsIG5ld0Rlc2MpIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVXJsfS91c2Vycy9tZWAsIHtcbiAgICBtZXRob2Q6ICdQQVRDSCcsXG4gICAgaGVhZGVyczogY29uZmlnLmhlYWRlcnMsXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgbmFtZTogbmV3TmFtZSxcbiAgICAgIGFib3V0OiBuZXdEZXNjXG4gICAgfSlcbiAgfSlcbiAgICAudGhlbihyZXMgPT4ge1xuICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGDQntGI0LjQsdC60LA6ICR7cmVzLnN0YXR1c31gKTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpXG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RDcmVhdGVDYXJkKGNhcmRUaXRsZSwgY2FyZExpbmspIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVXJsfS9jYXJkc2AsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBuYW1lOiBjYXJkVGl0bGUsXG4gICAgICBsaW5rOiBjYXJkTGlua1xuICAgIH0pXG4gIH0pXG4gICAgLnRoZW4ocmVzID0+IHtcbiAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDYXJkRnJvbVNlcnZlcihjYXJkSWQpIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVXJsfS9jYXJkcy8ke2NhcmRJZH1gLCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xuICB9KVxuICAudGhlbihyZXMgPT4ge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxpa2VDYXJkKGNhcmRJZCkge1xuICByZXR1cm4gZmV0Y2goYCR7Y29uZmlnLmJhc2VVcmx9L2NhcmRzL2xpa2VzLyR7Y2FyZElkfWAsIHtcbiAgICBtZXRob2Q6ICdQVVQnLFxuICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzXG4gIH0pXG4gIC50aGVuKHJlcyA9PiB7XG4gICAgaWYgKHJlcy5vaykge1xuICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XG4gICAgfVxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5saWtlQ2FyZChjYXJkSWQpIHtcbiAgcmV0dXJuIGZldGNoKGAke2NvbmZpZy5iYXNlVXJsfS9jYXJkcy9saWtlcy8ke2NhcmRJZH1gLCB7XG4gICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVyc1xuICB9KVxuICAudGhlbihyZXMgPT4ge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZUF2YXRhcihuZXdBdmF0YXJMaW5rKSB7XG4gIHJldHVybiBmZXRjaChgJHtjb25maWcuYmFzZVVybH0vdXNlcnMvbWUvYXZhdGFyYCwge1xuICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICBoZWFkZXJzOiBjb25maWcuaGVhZGVycyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBhdmF0YXI6IG5ld0F2YXRhckxpbmtcbiAgICB9KVxuICB9KVxuICAudGhlbihyZXMgPT4ge1xuICAgIGlmIChyZXMub2spIHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoYNCe0YjQuNCx0LrQsDogJHtyZXMuc3RhdHVzfWApO1xuICB9KVxuICAuY2F0Y2goZXJyID0+IHtcbiAgICBjb25zb2xlLmVycm9yKGVycilcbiAgfSk7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIG9wZW5Nb2RhbChtb2RhbENsYXNzKSB7XG4gIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihtb2RhbENsYXNzKTtcbiAgbW9kYWwuY2xhc3NMaXN0LmFkZCgncG9wdXBfaXMtb3BlbmVkJyk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBjbG9zZU1vZGFsRXNjKTtcbiAgbW9kYWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsT3ZlcmxheSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZU1vZGFsQnlFdmVudChldnQpIHtcbiAgY29uc3QgbW9kYWwgPSBldnQudGFyZ2V0LmNsb3Nlc3QoJy5wb3B1cCcpO1xuICBpZiAobW9kYWwpIHtcbiAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9pcy1vcGVuZWQnKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VNb2RhbEVzYyk7XG4gICAgbW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsT3ZlcmxheSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlTW9kYWwoKSB7XG4gIGNvbnN0IG9wZW5lZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX2lzLW9wZW5lZCcpO1xuICBpZiAob3BlbmVkTW9kYWwpIHtcbiAgICBvcGVuZWRNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9pcy1vcGVuZWQnKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgY2xvc2VNb2RhbEVzYyk7XG4gICAgb3BlbmVkTW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsT3ZlcmxheSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2xvc2VNb2RhbEVzYyhldnQpIHtcbiAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgY2xvc2VNb2RhbCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb3NlTW9kYWxPdmVybGF5KGV2dCkge1xuICBpZiAoZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQpIHtcbiAgICBjbG9zZU1vZGFsQnlFdmVudChldnQpO1xuICB9XG59IiwiaW1wb3J0IHsgcmVtb3ZlQ2FyZEZyb21TZXJ2ZXIgfSBmcm9tIFwiLi9hcGlcIjtcbmltcG9ydCB7IGNsb3NlTW9kYWwsIG9wZW5Nb2RhbCB9IGZyb20gXCIuL21vZGFsXCI7XG5cbmxldCBjYXJkVG9EZWxldGVJZCA9IG51bGw7XG5sZXQgY2FyZFRvRGVsZXRlRWxlbWVudCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25maXJtRGVsZXRlKCkge1xuICBpZiAoY2FyZFRvRGVsZXRlSWQgJiYgY2FyZFRvRGVsZXRlRWxlbWVudCkge1xuICAgIHJlbW92ZUNhcmRGcm9tU2VydmVyKGNhcmRUb0RlbGV0ZUlkKVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBjYXJkVG9EZWxldGVFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBjbG9zZU1vZGFsKCk7XG5cbiAgICAgICAgY2FyZFRvRGVsZXRlSWQgPSBudWxsO1xuICAgICAgICBjYXJkVG9EZWxldGVFbGVtZW50ID0gbnVsbDtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcign0J7RiNC40LHQutCwINC/0YDQuCDRg9C00LDQu9C10L3QuNC4INC60LDRgNGC0L7Rh9C60Lg6JywgZXJyKTtcbiAgICAgICAgY2xvc2VNb2RhbCgpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbmNlbERlbGV0ZSgpIHtcbiAgY2FyZFRvRGVsZXRlSWQgPSBudWxsO1xuICBjYXJkVG9EZWxldGVFbGVtZW50ID0gbnVsbDtcbiAgY2xvc2VNb2RhbCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQ2FyZChldnQsIGNhcmRJZCkge1xuICBjb25zdCBjYXJkRWxlbWVudCA9IGV2dC50YXJnZXQuY2xvc2VzdCgnLmNhcmQnKTtcbiAgXG4gIGNhcmRUb0RlbGV0ZUlkID0gY2FyZElkO1xuICBjYXJkVG9EZWxldGVFbGVtZW50ID0gY2FyZEVsZW1lbnQ7XG4gIG9wZW5Nb2RhbCgnLnBvcHVwX3R5cGVfY29uZmlybScpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVsZXRlQ2FyZEltbWVkaWF0ZWx5KGV2dCwgY2FyZElkKSB7XG4gIGNvbnN0IGNhcmRFbGVtZW50ID0gZXZ0LnRhcmdldC5jbG9zZXN0KCcuY2FyZCcpO1xuICBcbiAgcmVtb3ZlQ2FyZEZyb21TZXJ2ZXIoY2FyZElkKVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGNhcmRFbGVtZW50LnJlbW92ZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INGD0LTQsNC70LXQvdC40Lgg0LrQsNGA0YLQvtGH0LrQuDonLCBlcnIpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FyZChjYXJkRGF0YSwgZGVsZXRlQ2FyZCwgY2FyZFRlbXBsYXRlLCBoYW5kbGVJbWFnZUNsaWNrLCB1c2VySWQsIGxpa2VDYWxsYmFjaywgdW5saWtlQ2FsbGJhY2spIHtcbiAgY29uc3QgY2FyZCA9IGNhcmRUZW1wbGF0ZS5xdWVyeVNlbGVjdG9yKCcuY2FyZCcpLmNsb25lTm9kZSh0cnVlKTtcbiAgY29uc3QgY2FyZEltYWdlID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9faW1hZ2UnKTtcbiAgY29uc3QgY2FyZFRpdGxlID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fdGl0bGUnKTtcbiAgY29uc3QgY2FyZExpa2VCdXR0b24gPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19saWtlLWJ1dHRvbicpO1xuICBjb25zdCBjYXJkTGlrZUNvdW50ID0gY2FyZC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGlrZS1jb3VudCcpO1xuICBjb25zdCBkZWxldGVCdXR0b24gPSBjYXJkLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19kZWxldGUtYnV0dG9uJyk7XG4gIGNvbnN0IGlzTGlrZWQgPSBjYXJkRGF0YS5saWtlcy5zb21lKGxpa2UgPT4gbGlrZS5faWQgPT09IHVzZXJJZCk7XG5cbiAgY2FyZEltYWdlLnNyYyA9IGNhcmREYXRhLmxpbms7XG4gIGNhcmRJbWFnZS5hbHQgPSBjYXJkRGF0YS5uYW1lO1xuICBjYXJkVGl0bGUudGV4dENvbnRlbnQgPSBjYXJkRGF0YS5uYW1lO1xuICBjYXJkTGlrZUNvdW50LnRleHRDb250ZW50ID0gY2FyZERhdGEubGlrZXMubGVuZ3RoO1xuXG4gIGNhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHtcbiAgICBjb25zdCBlcnJvckNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVycm9yQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdjYXJkX19pbWFnZS1lcnJvcic7XG4gICAgZXJyb3JDb250YWluZXIuaW5uZXJIVE1MID0gYFxuICAgICAgPGRpdiBjbGFzcz1cImNhcmRfX2ltYWdlLWVycm9yLWJhY2tncm91bmRcIj48L2Rpdj5cbiAgICAgIDxwIGNsYXNzPVwiY2FyZF9faW1hZ2UtZXJyb3ItdGV4dFwiPtCd0LUg0YPQtNCw0LvQvtGB0Ywg0LfQsNCz0YDRg9C30LjRgtGMINC40LfQvtCx0YDQsNC20LXQvdC40LUgOig8L3A+XG4gICAgYDtcblxuICAgIGNhcmRJbWFnZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGNhcmQuaW5zZXJ0QmVmb3JlKGVycm9yQ29udGFpbmVyLCBjYXJkSW1hZ2UubmV4dFNpYmxpbmcpXG4gIH0pXG5cbiAgaWYgKGlzTGlrZWQpIHtcbiAgICBjYXJkTGlrZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdjYXJkX19saWtlLWJ1dHRvbl9pcy1hY3RpdmUnKTtcbiAgfVxuXG4gIGlmIChjYXJkRGF0YS5vd25lci5faWQgIT09IHVzZXJJZCkge1xuICAgIGRlbGV0ZUJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICAgIGRlbGV0ZUNhcmQoZXZ0LCBjYXJkRGF0YS5faWQpO1xuICAgIH0pO1xuXG4gIH1cblxuICBjYXJkTGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldnQpID0+IHtcbiAgICBjb25zdCBpc0N1cnJlbnRseUxpa2VkID0gZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpO1xuICAgIFxuICAgIGlmIChpc0N1cnJlbnRseUxpa2VkKSB7XG4gICAgICB1bmxpa2VDYWxsYmFjayhjYXJkRGF0YS5faWQpXG4gICAgICAgIC50aGVuKHVwZGF0ZWRDYXJkID0+IHtcbiAgICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5yZW1vdmUoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpO1xuICAgICAgICAgIGNhcmRMaWtlQ291bnQudGV4dENvbnRlbnQgPSB1cGRhdGVkQ2FyZC5saWtlcy5sZW5ndGg7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0YHQvdGP0YLQuNC4INC70LDQudC60LA6JywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpa2VDYWxsYmFjayhjYXJkRGF0YS5faWQpXG4gICAgICAgIC50aGVuKHVwZGF0ZWRDYXJkID0+IHtcbiAgICAgICAgICBldnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2NhcmRfX2xpa2UtYnV0dG9uX2lzLWFjdGl2ZScpO1xuICAgICAgICAgIGNhcmRMaWtlQ291bnQudGV4dENvbnRlbnQgPSB1cGRhdGVkQ2FyZC5saWtlcy5sZW5ndGg7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ9Ce0YjQuNCx0LrQsCDQv9GA0Lgg0YPRgdGC0LDQvdC+0LLQutC1INC70LDQudC60LA6JywgZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBjYXJkSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBoYW5kbGVJbWFnZUNsaWNrKGNhcmREYXRhKSk7XG5cbiAgcmV0dXJuIGNhcmQ7XG59IiwiZnVuY3Rpb24gc2hvd0lucHV0RXJyb3IoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgZXJyb3JNc2csIGNvbmZpZykge1xuICBjb25zdCBlcnJvckVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG5cbiAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQoY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XG4gIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTXNnO1xuICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZChjb25maWcuZXJyb3JDbGFzcyk7XG59XG5cbmZ1bmN0aW9uIGhpZGVJbnB1dEVycm9yKGZvcm1FbGVtZW50LCBpbnB1dEVsZW1lbnQsIGNvbmZpZykge1xuICBjb25zdCBlcnJvckVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG5cbiAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoY29uZmlnLmlucHV0RXJyb3JDbGFzcyk7XG4gIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNvbmZpZy5lcnJvckNsYXNzKTtcbiAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XG59XG5cbmZ1bmN0aW9uIGNoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcbiAgaWYgKGlucHV0RWxlbWVudC52YWxpZGl0eS5wYXR0ZXJuTWlzbWF0Y2gpIHtcbiAgICByZXR1cm4gaW5wdXRFbGVtZW50LmRhdGFzZXQuZXJyb3JNZXNzYWdlO1xuICB9XG4gIHJldHVybiBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2U7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWQoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgY29uZmlnKSB7XG4gIGNvbnN0IGVycm9yTXNnID0gY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0RWxlbWVudCk7XG5cbiAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICBzaG93SW5wdXRFcnJvcihmb3JtRWxlbWVudCwgaW5wdXRFbGVtZW50LCBlcnJvck1zZywgY29uZmlnKTtcbiAgfSBlbHNlIHtcbiAgICBoaWRlSW5wdXRFcnJvcihmb3JtRWxlbWVudCwgaW5wdXRFbGVtZW50LCBjb25maWcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcbiAgcmV0dXJuIGlucHV0TGlzdC5zb21lKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICByZXR1cm4gIWlucHV0RWxlbWVudC52YWxpZGl0eS52YWxpZDtcbiAgfSlcbn1cblxuZnVuY3Rpb24gdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50LCBjb25maWcpIHtcbiAgaWYgKGhhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpKSB7XG4gICAgYnV0dG9uRWxlbWVudC5kaXNhYmxlZCA9IHRydWU7XG4gICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKGNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgfSBlbHNlIHtcbiAgICBidXR0b25FbGVtZW50LmRpc2FibGVkID0gZmFsc2U7XG4gICAgYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgfVxufTsgXG5cbmZ1bmN0aW9uIHNldEV2ZW50TGlzdGVuZXIoZm9ybUVsZW1lbnQsIGNvbmZpZykge1xuICBjb25zdCBpbnB1dExpc3QgPSBBcnJheS5mcm9tKGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLmlucHV0U2VsZWN0b3IpKTtcblxuICBjb25zdCBidXR0b25FbGVtZW50ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3Rvcihjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuXG4gIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcbiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICBpc1ZhbGlkKGZvcm1FbGVtZW50LCBpbnB1dEVsZW1lbnQsIGNvbmZpZyk7XG4gICAgICB0b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQsIGNvbmZpZyk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5hYmxlVmFsaWRhdGlvbihjb25maWcpIHtcbiAgY29uc3QgZm9ybUxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY29uZmlnLmZvcm1TZWxlY3RvcikpO1xuXG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgc2V0RXZlbnRMaXN0ZW5lcihmb3JtRWxlbWVudCwgY29uZmlnKTsgXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJWYWxpZGF0aW9uKGZvcm1FbGVtZW50LCBjb25maWcpIHtcbiAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbmZpZy5pbnB1dFNlbGVjdG9yKSk7XG4gIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG5cbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgIGhpZGVJbnB1dEVycm9yKGZvcm1FbGVtZW50LCBpbnB1dEVsZW1lbnQsIGNvbmZpZyk7XG4gIH0pO1xuXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCwgY29uZmlnKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VWYWxpZGF0aW9uKGZvcm1FbGVtZW50LCBjb25maWcpIHtcbiAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKGNvbmZpZy5pbnB1dFNlbGVjdG9yKSk7XG4gIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSBmb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG5cbiAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgIGlzVmFsaWQoZm9ybUVsZW1lbnQsIGlucHV0RWxlbWVudCwgY29uZmlnKTtcbiAgfSk7XG5cbiAgdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50LCBjb25maWcpO1xufSIsImltcG9ydCAnLi4vcGFnZXMvaW5kZXguY3NzJztcclxuaW1wb3J0IHsgY2hhbmdlQXZhdGFyLCBnZXRJbml0aWFsQ2FyZHMsIGdldFVzZXJJbmZvLCBsaWtlQ2FyZCwgcGF0Y2hQcm9maWxlRWRpdCwgcG9zdENyZWF0ZUNhcmQsIHVubGlrZUNhcmQgfSBmcm9tICcuL2FwaS5qcyc7XHJcbmltcG9ydCB7IGNhbmNlbERlbGV0ZSwgY29uZmlybURlbGV0ZSwgY3JlYXRlQ2FyZCwgZGVsZXRlQ2FyZCB9IGZyb20gJy4vY2FyZC5qcyc7XHJcbmltcG9ydCB7IGNsb3NlTW9kYWwsIGNsb3NlTW9kYWxCeUV2ZW50LCBvcGVuTW9kYWwgfSBmcm9tICcuL21vZGFsLmpzJztcclxuaW1wb3J0IHsgY2xlYXJWYWxpZGF0aW9uLCBlbmFibGVWYWxpZGF0aW9uLCBmb3JjZVZhbGlkYXRpb24gfSBmcm9tICcuL3ZhbGlkYXRpb24uanMnO1xyXG5cclxuY29uc3QgY2FyZFRlbXBsYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhcmQtdGVtcGxhdGUnKS5jb250ZW50O1xyXG5jb25zdCBjYXJkc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wbGFjZXNfX2xpc3QnKTtcclxuY29uc3QgcHJvZmlsZUVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fZWRpdC1idXR0b24nKTtcclxuY29uc3QgY2xvc2VCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19jbG9zZScpO1xyXG5jb25zdCBhZGRDYXJkQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2FkZC1idXR0b24nKTtcclxuY29uc3QgcHJvZmlsZUZvcm1FbGVtZW50ID0gZG9jdW1lbnQuZm9ybXNbJ2VkaXQtcHJvZmlsZSddO1xyXG5jb25zdCBuYW1lSW5wdXQgPSBwcm9maWxlRm9ybUVsZW1lbnQuZWxlbWVudHMubmFtZTtcclxuY29uc3Qgam9iSW5wdXQgPSBwcm9maWxlRm9ybUVsZW1lbnQuZWxlbWVudHMuZGVzY3JpcHRpb247XHJcbmNvbnN0IGNhcmRGb3JtID0gZG9jdW1lbnQuZm9ybXNbJ25ldy1wbGFjZSddO1xyXG5jb25zdCBwbGFjZU5hbWUgPSBjYXJkRm9ybS5lbGVtZW50c1sncGxhY2UtbmFtZSddO1xyXG5jb25zdCBwbGFjZUltZyA9IGNhcmRGb3JtLmVsZW1lbnRzLmxpbms7XHJcbmNvbnN0IHByb2ZpbGVOYW1lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX3RpdGxlJyk7XHJcbmNvbnN0IHByb2ZpbGVEZXNjID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJyk7XHJcbmNvbnN0IHByb2ZpbGVBdmF0YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9faW1hZ2UnKTtcclxuY29uc3QgYXZhdGFyRWRpdEZvcm1FbGVtZW50ID0gZG9jdW1lbnQuZm9ybXNbJ3VwZGF0ZV9hdmF0YXInXTtcclxuY29uc3QgY29uZmlybVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3R5cGVfY29uZmlybScpO1xyXG5jb25zdCBjb25maXJtQnV0dG9uID0gY29uZmlybVBvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fYnV0dG9uJyk7XHJcbmNvbnN0IGNvbmZpcm1DbG9zZUJ1dHRvbiA9IGNvbmZpcm1Qb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJyk7XHJcblxyXG5sZXQgY3VycmVudFVzZXJJZDtcclxuY29uc3QgdmFsaWRhdGlvbkNvbmZpZyA9IHtcclxuICBmb3JtU2VsZWN0b3I6ICcucG9wdXBfX2Zvcm0nLFxyXG4gIGlucHV0U2VsZWN0b3I6ICcucG9wdXBfX2lucHV0JyxcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvcjogJy5wb3B1cF9fYnV0dG9uJyxcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAncG9wdXBfX2J1dHRvbl9kaXNhYmxlZCcsXHJcbiAgaW5wdXRFcnJvckNsYXNzOiAncG9wdXBfX2lucHV0X3R5cGVfZXJyb3InLFxyXG4gIGVycm9yQ2xhc3M6ICdwb3B1cF9fZXJyb3JfdmlzaWJsZSdcclxufTtcclxuXHJcblByb21pc2UuYWxsKFtnZXRVc2VySW5mbygpLCBnZXRJbml0aWFsQ2FyZHMoKV0pXHJcbiAgLnRoZW4oKFt1c2VySW5mbywgY2FyZExpc3RdKSA9PiB7XHJcbiAgICBjdXJyZW50VXNlcklkID0gdXNlckluZm8uX2lkXHJcblxyXG4gICAgcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSB1c2VySW5mby5uYW1lO1xyXG4gICAgcHJvZmlsZURlc2MudGV4dENvbnRlbnQgPSB1c2VySW5mby5hYm91dDtcclxuICAgIHByb2ZpbGVBdmF0YXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHt1c2VySW5mby5hdmF0YXJ9JylgO1xyXG5cclxuICAgIGNhcmRMaXN0LmZvckVhY2goY2FyZCA9PiB7XHJcbiAgICAgIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVDYXJkKGNhcmQsIGRlbGV0ZUNhcmQsIGNhcmRUZW1wbGF0ZSwgaGFuZGxlSW1hZ2VDbGljaywgY3VycmVudFVzZXJJZCwgbGlrZUNhcmQsIHVubGlrZUNhcmQpO1xyXG4gICAgICBjYXJkc0NvbnRhaW5lci5hcHBlbmQobmV3Q2FyZCk7XHJcbiAgICB9KTtcclxuICB9KVxyXG4gIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgY29uc29sZS5lcnJvcihg0J7RiNC40LHQutCwINC30LDQs9GA0YPQt9C60Lgg0LTQsNC90L3Ri9GFOiAke2Vycn1gKVxyXG4gIH0pO1xyXG5cclxuZnVuY3Rpb24gdG9nZ2xlQnV0dG9uU3RhdGUoYnV0dG9uLCBpc0xvYWRpbmcsIG9yaWdpbmFsVGV4dCkge1xyXG4gIGlmIChpc0xvYWRpbmcpIHtcclxuICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9ICfQodC+0YXRgNCw0L3QtdC90LjQtS4uLic7XHJcbiAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX19idXR0b25fbG9hZGluZycpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBidXR0b24udGV4dENvbnRlbnQgPSBvcmlnaW5hbFRleHQ7XHJcbiAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9fYnV0dG9uX2xvYWRpbmcnKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbmZpcm1CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb25maXJtRGVsZXRlKTtcclxuY29uZmlybUNsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2FuY2VsRGVsZXRlKTtcclxuY29uZmlybVBvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xyXG4gIGlmIChldnQudGFyZ2V0ID09PSBjb25maXJtUG9wdXApIHtcclxuICAgIGNhbmNlbERlbGV0ZSgpO1xyXG4gIH1cclxufSk7XHJcblxyXG5mdW5jdGlvbiBoYW5kbGVJbWFnZUNsaWNrKGNhcmREYXRhKSB7XHJcbiAgY29uc3QgcG9wdXBJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcclxuICBjb25zdCBwb3B1cENhcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2NhcHRpb24nKTtcclxuXHJcbiAgcG9wdXBJbWFnZS5zcmMgPSBjYXJkRGF0YS5saW5rO1xyXG4gIHBvcHVwSW1hZ2UuYWx0ID0gY2FyZERhdGEubmFtZTtcclxuICBwb3B1cENhcHRpb24udGV4dENvbnRlbnQgPSBjYXJkRGF0YS5uYW1lO1xyXG5cclxuICBvcGVuTW9kYWwoJy5wb3B1cF90eXBlX2ltYWdlJyk7XHJcbn1cclxuXHJcbnByb2ZpbGVFZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gIG5hbWVJbnB1dC52YWx1ZSA9IHByb2ZpbGVOYW1lLnRleHRDb250ZW50O1xyXG4gIGpvYklucHV0LnZhbHVlID0gcHJvZmlsZURlc2MudGV4dENvbnRlbnQ7XHJcbiAgb3Blbk1vZGFsKCcucG9wdXBfdHlwZV9lZGl0Jyk7XHJcbiAgY2xlYXJWYWxpZGF0aW9uKHByb2ZpbGVGb3JtRWxlbWVudCwgdmFsaWRhdGlvbkNvbmZpZyk7XHJcbiAgZm9yY2VWYWxpZGF0aW9uKHByb2ZpbGVGb3JtRWxlbWVudCwgdmFsaWRhdGlvbkNvbmZpZyk7IC8vINC00L7QsdCw0LLQuNC7INGN0YLRgyDRhNGD0L3QutGG0LjRjiDRgi7Qui4g0YEg0YHQtdGA0LLQtdGA0LAg0LjQtNGD0YIg0LTQsNC90L3Ri9C1INGB0L7QtNC10YDQttCw0YnQuNC1INC30LDQv9GP0YLRg9GOINC4INC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INC80L7QtNCw0LvQutC4IC0g0LrQvdC+0L/QutCwIFwi0YHQvtGF0YDQsNC90LjRgtGMXCIg0L3QtdC00L7RgdGC0YPQv9C90LAg0L/QvtC60LAg0L3QtSDRg9Cx0LXRgNC10YjRjCDQt9Cw0L/Rj9GC0YPRjiwg0LAg0YHQvtC+0LHRidC10L3QuNC1INC+INGC0L7QvCDQv9C+0YfQtdC80YMg0LrQvdC+0L/QutCwINC90LXQtNC+0YHRgtGD0L/QvdCwINC90LUg0LLRi9Cy0L7QtNC40YLRgdGPINC40Lct0LfQsCBjbGVyVmFsaWRhdGlvblxyXG59KTtcclxuXHJcbmFkZENhcmRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgb3Blbk1vZGFsKCcucG9wdXBfdHlwZV9uZXctY2FyZCcpO1xyXG4gIGNsZWFyVmFsaWRhdGlvbihjYXJkRm9ybSwgdmFsaWRhdGlvbkNvbmZpZyk7XHJcbn0pO1xyXG5cclxucHJvZmlsZUF2YXRhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICBvcGVuTW9kYWwoJy5wb3B1cF90eXBlX2F2YXRhcicpO1xyXG4gIGNsZWFyVmFsaWRhdGlvbihhdmF0YXJFZGl0Rm9ybUVsZW1lbnQsIHZhbGlkYXRpb25Db25maWcpO1xyXG59KVxyXG5cclxuZnVuY3Rpb24gaGFuZGxlQXZhdGFyVXBkYXRlRm9ybVN1Ym1pdChldnQpIHtcclxuICBldnQucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgY29uc3Qgc3VibWl0QnV0dG9uID0gZXZ0LnRhcmdldC5xdWVyeVNlbGVjdG9yKHZhbGlkYXRpb25Db25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG4gIGNvbnN0IG9yaWdpbmFsVGV4dCA9IHN1Ym1pdEJ1dHRvbi50ZXh0Q29udGVudDtcclxuICB0b2dnbGVCdXR0b25TdGF0ZShzdWJtaXRCdXR0b24sIHRydWUsIG9yaWdpbmFsVGV4dCk7XHJcblxyXG4gIGNvbnN0IHByb2ZpbGVOZXdBdmF0YXJMaW5rID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX25ld19hdmF0YXItbGluaycpLnZhbHVlO1xyXG5cclxuICBjaGFuZ2VBdmF0YXIocHJvZmlsZU5ld0F2YXRhckxpbmspXHJcbiAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgIHByb2ZpbGVBdmF0YXIuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gYHVybCgnJHtwcm9maWxlTmV3QXZhdGFyTGlua30nKWA7XHJcbiAgICAgIGNsb3NlTW9kYWwoZXZ0KTtcclxuICAgICAgYXZhdGFyRWRpdEZvcm1FbGVtZW50LnJlc2V0KCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihg0J7RiNC40LHQutCwINC/0YDQuCDQvtCx0L3QvtCy0LvQtdC90LjQuCDQsNCy0LDRgtCw0YDQsDogJHtlcnJ9YCk7XHJcbiAgICB9KVxyXG4gICAgLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICB0b2dnbGVCdXR0b25TdGF0ZShzdWJtaXRCdXR0b24sIGZhbHNlLCBvcmlnaW5hbFRleHQpO1xyXG4gICAgfSlcclxufVxyXG5cclxuYXZhdGFyRWRpdEZvcm1FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGhhbmRsZUF2YXRhclVwZGF0ZUZvcm1TdWJtaXQpO1xyXG5cclxuY2xvc2VCdXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcclxuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZU1vZGFsQnlFdmVudCk7XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQoZXZ0KSB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGV2dC50YXJnZXQucXVlcnlTZWxlY3Rvcih2YWxpZGF0aW9uQ29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICBjb25zdCBvcmlnaW5hbFRleHQgPSBzdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcblxyXG4gIHRvZ2dsZUJ1dHRvblN0YXRlKHN1Ym1pdEJ1dHRvbiwgdHJ1ZSwgb3JpZ2luYWxUZXh0KTtcclxuXHJcbiAgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fdGl0bGUnKTtcclxuICBjb25zdCBwcm9maWxlSm9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2Rlc2NyaXB0aW9uJyk7XHJcblxyXG4gIHBhdGNoUHJvZmlsZUVkaXQobmFtZUlucHV0LnZhbHVlLCBqb2JJbnB1dC52YWx1ZSlcclxuICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgcHJvZmlsZU5hbWUudGV4dENvbnRlbnQgPSBuYW1lSW5wdXQudmFsdWU7XHJcbiAgICAgIHByb2ZpbGVKb2IudGV4dENvbnRlbnQgPSBqb2JJbnB1dC52YWx1ZTtcclxuICAgICAgY2xvc2VNb2RhbChldnQpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYNCe0YjQuNCx0LrQsCDQv9GA0Lgg0L7QsdC90L7QstC70LXQvdC40Lgg0L/RgNC+0YTQuNC70Y86ICR7ZXJyfWApO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgdG9nZ2xlQnV0dG9uU3RhdGUoc3VibWl0QnV0dG9uLCBmYWxzZSwgb3JpZ2luYWxUZXh0KTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5wcm9maWxlRm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlUHJvZmlsZUZvcm1TdWJtaXQpO1xyXG5cclxuZnVuY3Rpb24gbmV3Q2FyZEZvcm1TdWJtaXQoZXZ0KSB7XHJcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IGV2dC50YXJnZXQucXVlcnlTZWxlY3Rvcih2YWxpZGF0aW9uQ29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yKTtcclxuICBjb25zdCBvcmlnaW5hbFRleHQgPSBzdWJtaXRCdXR0b24udGV4dENvbnRlbnQ7XHJcbiAgdG9nZ2xlQnV0dG9uU3RhdGUoc3VibWl0QnV0dG9uLCB0cnVlLCBvcmlnaW5hbFRleHQpO1xyXG5cclxuICBjb25zdCBjcmVhdGVEYXRhID0ge1xyXG4gICAgbmFtZTogcGxhY2VOYW1lLnZhbHVlLFxyXG4gICAgbGluazogcGxhY2VJbWcudmFsdWVcclxuICB9O1xyXG5cclxuICBwb3N0Q3JlYXRlQ2FyZChjcmVhdGVEYXRhLm5hbWUsIGNyZWF0ZURhdGEubGluaylcclxuICAgIC50aGVuKG5ld0NhcmRGcm9tU2VydmVyID0+IHtcclxuICAgICAgY29uc3QgbmV3Q2FyZCA9IGNyZWF0ZUNhcmQoXHJcbiAgICAgICAgbmV3Q2FyZEZyb21TZXJ2ZXIsIFxyXG4gICAgICAgIGRlbGV0ZUNhcmQsIFxyXG4gICAgICAgIGNhcmRUZW1wbGF0ZSwgXHJcbiAgICAgICAgaGFuZGxlSW1hZ2VDbGljayxcclxuICAgICAgICBjdXJyZW50VXNlcklkLFxyXG4gICAgICAgIGxpa2VDYXJkLFxyXG4gICAgICAgIHVubGlrZUNhcmRcclxuICAgICAgKTtcclxuICAgICAgY2FyZHNDb250YWluZXIucHJlcGVuZChuZXdDYXJkKTtcclxuICAgICAgY2FyZEZvcm0ucmVzZXQoKTtcclxuICAgICAgY2xvc2VNb2RhbChldnQpO1xyXG4gICAgICBjbGVhclZhbGlkYXRpb24oY2FyZEZvcm0sIHZhbGlkYXRpb25Db25maWcpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfQntGI0LjQsdC60LAg0L/RgNC4INGB0L7Qt9C00LDQvdC40Lgg0LrQsNGA0YLQvtGH0LrQuDonLCBlcnIpO1xyXG4gICAgfSlcclxuICAgIC5maW5hbGx5KCgpID0+IHtcclxuICAgICAgdG9nZ2xlQnV0dG9uU3RhdGUoc3VibWl0QnV0dG9uLCBmYWxzZSwgb3JpZ2luYWxUZXh0KTtcclxuICAgIH0pXHJcbn1cclxuXHJcbmNhcmRGb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIG5ld0NhcmRGb3JtU3VibWl0KTtcclxuXHJcbmVuYWJsZVZhbGlkYXRpb24odmFsaWRhdGlvbkNvbmZpZyk7XHJcbiJdLCJuYW1lcyI6WyJjb25maWciLCJiYXNlVXJsIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJnZXRVc2VySW5mbyIsImZldGNoIiwiY29uY2F0IiwidGhlbiIsInJlcyIsIm9rIiwianNvbiIsIlByb21pc2UiLCJyZWplY3QiLCJzdGF0dXMiLCJnZXRJbml0aWFsQ2FyZHMiLCJwYXRjaFByb2ZpbGVFZGl0IiwibmV3TmFtZSIsIm5ld0Rlc2MiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hbWUiLCJhYm91dCIsImNhdGNoIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwicG9zdENyZWF0ZUNhcmQiLCJjYXJkVGl0bGUiLCJjYXJkTGluayIsImxpbmsiLCJyZW1vdmVDYXJkRnJvbVNlcnZlciIsImNhcmRJZCIsImxpa2VDYXJkIiwidW5saWtlQ2FyZCIsImNoYW5nZUF2YXRhciIsIm5ld0F2YXRhckxpbmsiLCJhdmF0YXIiLCJvcGVuTW9kYWwiLCJtb2RhbENsYXNzIiwibW9kYWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xvc2VNb2RhbEVzYyIsImNsb3NlTW9kYWxPdmVybGF5IiwiY2xvc2VNb2RhbEJ5RXZlbnQiLCJldnQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNsb3NlTW9kYWwiLCJvcGVuZWRNb2RhbCIsImtleSIsImN1cnJlbnRUYXJnZXQiLCJjYXJkVG9EZWxldGVJZCIsImNhcmRUb0RlbGV0ZUVsZW1lbnQiLCJjb25maXJtRGVsZXRlIiwiY2FuY2VsRGVsZXRlIiwiZGVsZXRlQ2FyZCIsImNhcmRFbGVtZW50IiwiZGVsZXRlQ2FyZEltbWVkaWF0ZWx5IiwiY3JlYXRlQ2FyZCIsImNhcmREYXRhIiwiY2FyZFRlbXBsYXRlIiwiaGFuZGxlSW1hZ2VDbGljayIsInVzZXJJZCIsImxpa2VDYWxsYmFjayIsInVubGlrZUNhbGxiYWNrIiwiY2FyZCIsImNsb25lTm9kZSIsImNhcmRJbWFnZSIsImNhcmRMaWtlQnV0dG9uIiwiY2FyZExpa2VDb3VudCIsImRlbGV0ZUJ1dHRvbiIsImlzTGlrZWQiLCJsaWtlcyIsInNvbWUiLCJsaWtlIiwiX2lkIiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJsZW5ndGgiLCJlcnJvckNvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJzdHlsZSIsImRpc3BsYXkiLCJpbnNlcnRCZWZvcmUiLCJuZXh0U2libGluZyIsIm93bmVyIiwiaXNDdXJyZW50bHlMaWtlZCIsImNvbnRhaW5zIiwidXBkYXRlZENhcmQiLCJzaG93SW5wdXRFcnJvciIsImZvcm1FbGVtZW50IiwiaW5wdXRFbGVtZW50IiwiZXJyb3JNc2ciLCJlcnJvckVsZW1lbnQiLCJpZCIsImlucHV0RXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJoaWRlSW5wdXRFcnJvciIsImNoZWNrSW5wdXRWYWxpZGl0eSIsInZhbGlkaXR5IiwicGF0dGVybk1pc21hdGNoIiwiZGF0YXNldCIsImVycm9yTWVzc2FnZSIsInZhbGlkYXRpb25NZXNzYWdlIiwiaXNWYWxpZCIsInZhbGlkIiwiaGFzSW52YWxpZElucHV0IiwiaW5wdXRMaXN0IiwidG9nZ2xlQnV0dG9uU3RhdGUiLCJidXR0b25FbGVtZW50IiwiZGlzYWJsZWQiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwic2V0RXZlbnRMaXN0ZW5lciIsIkFycmF5IiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnB1dFNlbGVjdG9yIiwic3VibWl0QnV0dG9uU2VsZWN0b3IiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsImZvcm1MaXN0IiwiZm9ybVNlbGVjdG9yIiwiY2xlYXJWYWxpZGF0aW9uIiwiZm9yY2VWYWxpZGF0aW9uIiwiY29udGVudCIsImNhcmRzQ29udGFpbmVyIiwicHJvZmlsZUVkaXRCdXR0b24iLCJjbG9zZUJ1dHRvbnMiLCJhZGRDYXJkQnV0dG9uIiwicHJvZmlsZUZvcm1FbGVtZW50IiwiZm9ybXMiLCJuYW1lSW5wdXQiLCJlbGVtZW50cyIsImpvYklucHV0IiwiZGVzY3JpcHRpb24iLCJjYXJkRm9ybSIsInBsYWNlTmFtZSIsInBsYWNlSW1nIiwicHJvZmlsZU5hbWUiLCJwcm9maWxlRGVzYyIsInByb2ZpbGVBdmF0YXIiLCJhdmF0YXJFZGl0Rm9ybUVsZW1lbnQiLCJjb25maXJtUG9wdXAiLCJjb25maXJtQnV0dG9uIiwiY29uZmlybUNsb3NlQnV0dG9uIiwiY3VycmVudFVzZXJJZCIsInZhbGlkYXRpb25Db25maWciLCJhbGwiLCJfcmVmIiwiX3JlZjIiLCJfc2xpY2VkVG9BcnJheSIsInVzZXJJbmZvIiwiY2FyZExpc3QiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJuZXdDYXJkIiwiYXBwZW5kIiwiYnV0dG9uIiwiaXNMb2FkaW5nIiwib3JpZ2luYWxUZXh0IiwicG9wdXBJbWFnZSIsInBvcHVwQ2FwdGlvbiIsInZhbHVlIiwiaGFuZGxlQXZhdGFyVXBkYXRlRm9ybVN1Ym1pdCIsInByZXZlbnREZWZhdWx0Iiwic3VibWl0QnV0dG9uIiwicHJvZmlsZU5ld0F2YXRhckxpbmsiLCJyZXNldCIsImZpbmFsbHkiLCJoYW5kbGVQcm9maWxlRm9ybVN1Ym1pdCIsInByb2ZpbGVKb2IiLCJuZXdDYXJkRm9ybVN1Ym1pdCIsImNyZWF0ZURhdGEiLCJuZXdDYXJkRnJvbVNlcnZlciIsInByZXBlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///498\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__[498]();
/******/ 	
/******/ })()
;